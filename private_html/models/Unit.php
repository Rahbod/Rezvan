<?php

namespace app\models;

use Yii;

/**
 * This is the model class for table "item".
 *
 * @property int $itemID
 * @property int $unit_number
 * @property int $floor_number
 * @property int $area_size
 * @property string $location
 * @property string $services
 * @property int $sort
 */
class Unit extends Item
{
    public static $multiLanguage = false;
    public static $modelName = 'unit';

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'item';
    }

    public function init()
    {
        parent::init();
        $this->dynaDefaults = array_merge($this->dynaDefaults, [
            'itemID' => ['INTEGER', ''],
            'unit_number' => ['INTEGER', ''],
            'floor_number' => ['INTEGER', ''],
            'air_conditioner' => ['INTEGER', ''],
            'wc' => ['INTEGER', ''],
            'bath_room' => ['INTEGER', ''],
            'parking' => ['INTEGER', ''],
            'radiator' => ['INTEGER', ''],
            'area_size' => ['INTEGER', ''],
            'location' => ['CHAR', ''],
//            'services' => ['CHAR', ''],
            'sold' => ['INTEGER', ''],
            'project_blocks' => ['INTEGER', ''],

            // unit sort field
            'sort' => ['INTEGER', '']
        ]);
    }


    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return array_merge(parent::rules(), [
            ['modelID', 'default', 'value' => isset(Yii::$app->controller->models[self::$modelName]) ? Yii::$app->controller->models[self::$modelName] : null],
            [['itemID'], 'required'],
            [
                ['itemID', 'unit_number', 'floor_number', 'area_size', 'sort',
                    'air_conditioner', 'wc', 'parking', 'bath_room', 'radiator', 'location', 'sold', 'bed_room']
                , 'integer'],
            [['project_blocks'], 'default', 'value' => 0],
            [['itemID', 'unit_number', 'floor_number', 'area_size', 'sort', 'price'], 'integer'],
            [['location', 'services'], 'string']
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return array_merge(parent::attributeLabels(), [
            'itemID' => trans('words', 'Project ID'),
            'sort' => trans('words', 'Sort'),
            'unit_number' => trans('words', 'Unit number'),
            'floor_number' => trans('words', 'Floor number'),
            'area_size' => trans('words', 'Area size'),
            'location' => trans('words', 'Location'),
//            'services' => trans('words', 'Services'),
            'air_conditioner' => trans('words', 'Air conditioner'),
            'wc' => trans('words', 'WC'),
            'bath_room' => trans('words', 'Bath room'),
            'Parking' => trans('words', 'Parking'),
            'radiator' => trans('words', 'Radiator'),
            'sold' => trans('words', 'Sold'),
            'project_blocks' => trans('words', 'Use project blocks'),
            'bed_room' => trans('words', 'Bed room'),
            'price' => trans('words', 'Price'),
        ]);
    }

    /**
     * {@inheritdoc}
     * @return ItemQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new ItemQuery(get_called_class());
    }

    public function beforeSave($insert)
    {
        if ($insert)
            $this->sort = $this->getMaxSort() + 1;
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * Return maximum saved sort
     * @return integer
     */
    public function getMaxSort()
    {
        return self::find()->where([
            'itemID' => $this->itemID,
        ])->max(self::columnGetString('sort'));
    }

    public function formAttributes()
    {
        return [
            'status' => [
                'type' => self::FORM_FIELD_TYPE_SELECT,
                'items' => self::getStatusFilter()
            ],
//            'parent'=>self::FORM_FIELD_TYPE_TEXT,
//            'unit_per_floor_number'=>self::FORM_FIELD_TYPE_TEXT,

//            'project_blocks' => [
//                'type' => self::FORM_FIELD_TYPE_SELECT,
//                'items' => self::getStatusFilter()
//            ],
            [['name', 'sold', 'radiator', 'parking', 'bath_room',
                'wc', 'air_conditioner', 'floor_number', 'unit_number',
                'area_size', 'bed_room', 'price'], self::FORM_FIELD_TYPE_TEXT],
        ];
    }

    public function getBlocks()
    {
        return $this->hasMany(Block::className(), [self::columnGetString('itemID') => 'id']);
    }
}
